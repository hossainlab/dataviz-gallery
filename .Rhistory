axis.ticks.x = element_blank(),
axis.line.x = element_blank(),
plot.margin = unit(c(1, 1, 1, 1), "cm")
)
# https://simplystatistics.org/posts/2019-08-28-you-can-replicate-almost-any-plot-with-ggplot2/
library(tidyverse)
library(ggplot2)
library(ggflags)
library(countrycode)
library(ggthemes)
data <- tibble(
country = toupper(c("US", "Italy", "Canada", "UK", "Japan", "Germany", "France", "Russia")),
count = c(3.2, 0.71, 0.5, 0.1, 0, 0.2, 0.1, 0),
label = c(as.character(c(3.2, 0.71, 0.5, 0.1, 0, 0.2, 0.1)), "No Data"),
code = c("us", "it", "ca", "gb", "jp", "de", "fr", "ru")  # Ensure lowercase country codes
)
data |>
mutate(country = reorder(country, -count)) |>
ggplot(aes(x = country, y = count, label = label)) +
geom_bar(stat = "identity", fill = "darkred") +
geom_text(nudge_y = 0.2, color = "darkred", size = 5) +
geom_flag(aes(y = -0.5, country = code), size = 10) +  # Adjusted flag position
scale_y_continuous(breaks = c(0, 1, 2, 3, 4), limits = c(-0.6, 4)) +  # More space for flags
annotate("text", x = 6.25, y = 3.8, label = "Source UNODC Homicide Statistics", size = 5) +
ggtitle("HOMICIDE PER 100,000 IN G-8 COUNTRIES") +
xlab("") +
ylab("# of gun-related homicides\nper 100,000 people") +
theme_minimal() +
theme(
plot.background = element_rect(fill = "gray90", color = NA),  # Gray background for flag visibility
axis.text.x = element_text(size = 8, vjust = -6),
axis.ticks.x = element_blank(),
axis.line.x = element_blank(),
plot.margin = unit(c(1, 1, 1, 1), "cm")
)
setwd("I://dataviz-gallery/reproduce-with-r")
# Save the plot
ggsave("figures/homicide_plot.png", width = 10, height = 6)
data |>
mutate(country = reorder(country, -count)) |>
ggplot(aes(x = country, y = count, label = label)) +
geom_bar(stat = "identity", fill = "darkred") +
geom_text(nudge_y = 0.2, color = "darkred", size = 5) +
geom_flag(aes(y = -0.5, country = code), size = 10) +  # Adjusted flag position
scale_y_continuous(breaks = c(0, 1, 2, 3, 4), limits = c(-0.6, 4)) +  # More space for flags
annotate("text", x = 6.25, y = 3.8, label = "Source: UNODC Homicide Statistics", size = 5) +
ggtitle("HOMICIDE PER 100,000 IN G-8 COUNTRIES") +
xlab("") +
ylab("# of gun-related homicides\nper 100,000 people") +
theme_minimal() +
theme(
plot.background = element_rect(fill = "gray90", color = NA),  # Gray background for flag visibility
axis.text.x = element_text(size = 8, vjust = -6),
axis.ticks.x = element_blank(),
axis.line.x = element_blank(),
plot.margin = unit(c(1, 1, 1, 1), "cm")
)
# Save the plot
ggsave("figures/homicide_plot.png", width = 10, height = 6)
data |>
mutate(country = reorder(country, -count)) |>
ggplot(aes(x = country, y = count, label = label)) +
geom_bar(stat = "identity", fill = "darkred") +
geom_text(nudge_y = 0.2, color = "darkred", size = 5) +
geom_flag(aes(y = -0.5, country = code), size = 10) +  # Adjusted flag position
scale_y_continuous(breaks = c(0, 1, 2, 3, 4), limits = c(-0.6, 4)) +  # More space for flags
annotate("text", x = 6.25, y = 3.8, label = "Source: UNODC Homicide Statistics", size = 5) +
ggtitle("Homicide per 100,000 in G-8 Countries") +
xlab("") +
ylab("# of gun-related homicides\nper 100,000 people") +
theme_minimal() +
theme(
plot.background = element_rect(fill = "gray90", color = NA),  # Gray background for flag visibility
axis.text.x = element_text(size = 8, vjust = -6),
axis.ticks.x = element_blank(),
axis.line.x = element_blank(),
plot.margin = unit(c(1, 1, 1, 1), "cm")
)
data |>
mutate(country = reorder(country, -count)) |>
ggplot(aes(x = country, y = count, label = label)) +
geom_bar(stat = "identity", fill = "darkred") +
geom_text(nudge_y = 0.2, color = "darkred", size = 5) +
geom_flag(aes(y = -0.5, country = code), size = 10) +  # Adjusted flag position
scale_y_continuous(breaks = c(0, 1, 2, 3, 4), limits = c(-0.6, 4)) +  # More space for flags
annotate("text", x = 6.25, y = 3.8, label = "Source: UNODC Homicide Statistics", size = 5) +
ggtitle("Homicide per 100,000 in G-8 Countries") +
xlab("") +
ylab("# of gun-related homicides\nper 100,000 people") +
theme_economist() +
theme(
plot.background = element_rect(fill = "gray90", color = NA),  # Gray background for flag visibility
axis.text.x = element_text(size = 8, vjust = -6),
axis.ticks.x = element_blank(),
axis.line.x = element_blank(),
plot.margin = unit(c(1, 1, 1, 1), "cm")
)
# Save the plot
ggsave("figures/homicide_plot.png", width = 10, height = 6)
dat <- tibble(country = toupper(c("United States", "Canada", "Portugal", "Ireland", "Italy", "Belgium", "Finland", "France", "Netherlands", "Denmark", "Sweden", "Slovakia", "Austria", "New Zealand", "Australia", "Spain", "Czech Republic", "Hungry", "Germany", "United Kingdom", "Norway", "Japan", "Republic of Korea")),
count = c(3.61, 0.5, 0.48, 0.35, 0.35, 0.33, 0.26, 0.20, 0.20, 0.20, 0.19, 0.19, 0.18, 0.16,
0.16, 0.15, 0.12, 0.10, 0.06, 0.04, 0.04, 0.01, 0.01))
dat %>%
mutate(country = reorder(country, count)) %>%
ggplot(aes(country, count, label = count)) +
geom_bar(stat = "identity", fill = "darkred", width = 0.5) +
geom_text(nudge_y = 0.2,  size = 3) +
xlab("") + ylab("") +
ggtitle(toupper("Gun Murders per 100,000 residents")) +
theme_minimal() +
theme(panel.grid.major =element_blank(), panel.grid.minor = element_blank(),
axis.text.x = element_blank(),
axis.ticks.length = unit(-0.4, "cm")) +
coord_flip()
# Save the plot
ggsave("figures/gun_murders_plot.png", width = 10, height = 6)
dat %>%
mutate(country = reorder(country, count)) %>%
ggplot(aes(country, count, label = count)) +
geom_bar(stat = "identity", fill = "darkred", width = 0.5) +
geom_text(nudge_y = 0.2,  size = 3) +
xlab("") + ylab("") +
ggtitle(toupper("Gun Murders per 100,000 residents")) +
theme_light() +
theme(panel.grid.major =element_blank(), panel.grid.minor = element_blank(),
axis.text.x = element_blank(),
axis.ticks.length = unit(-0.4, "cm")) +
coord_flip()
# Save the plot
ggsave("figures/gun_murders_plot.png", width = 10, height = 6)
library(dslabs)
data(us_contagious_diseases)
the_disease <- "Measles"
dat <- us_contagious_diseases %>%
filter(!state%in%c("Hawaii","Alaska") & disease == the_disease) %>%
mutate(rate = count / population * 10000 * 52 / weeks_reporting)
jet.colors <- colorRampPalette(c("#F0FFFF", "cyan", "#007FFF", "yellow", "#FFBF00", "orange", "red", "#7F0000"), bias = 2.25)
dat %>% mutate(state = reorder(state, desc(state))) %>%
ggplot(aes(year, state, fill = rate)) +
geom_tile(color = "white", size = 0.35) +
scale_x_continuous(expand = c(0,0)) +
scale_fill_gradientn(colors = jet.colors(16), na.value = 'white') +
geom_vline(xintercept = 1963, col = "black") +
theme_minimal() +
theme(panel.grid = element_blank()) +
coord_cartesian(clip = 'off') +
ggtitle(the_disease) +
ylab("") +
xlab("") +
theme(legend.position = "bottom", text = element_text(size = 8)) +
annotate(geom = "text", x = 1963, y = 50.5, label = "Vaccine introduced", size = 3, hjust = 0)
ggsave("figures/battling_infectious_diseases_plot.png", width = 10, height = 6)
dat %>% mutate(state = reorder(state, desc(state))) %>%
ggplot(aes(year, state, fill = rate)) +
geom_tile(color = "white", size = 0.35) +
scale_x_continuous(expand = c(0,0)) +
scale_fill_gradientn(colors = jet.colors(16), na.value = 'white') +
geom_vline(xintercept = 1963, col = "black") +
theme_light() +
theme(panel.grid = element_blank()) +
coord_cartesian(clip = 'off') +
ggtitle(the_disease) +
ylab("") +
xlab("") +
theme(legend.position = "bottom", text = element_text(size = 8)) +
annotate(geom = "text", x = 1963, y = 50.5, label = "Vaccine introduced", size = 3, hjust = 0)
ggsave("figures/battling_infectious_diseases_plot.png", width = 10, height = 6)
data("nyc_regents_scores")
nyc_regents_scores$total <- rowSums(nyc_regents_scores[,-1], na.rm=TRUE)
nyc_regents_scores %>%
filter(!is.na(score)) %>%
ggplot(aes(score, total)) +
annotate("rect", xmin = 65, xmax = 99, ymin = 0, ymax = 35000, alpha = .5) +
geom_bar(stat = "identity", color = "black", fill = "#C4843C") +
annotate("text", x = 66, y = 28000, label = "MINIMUM\nREGENTS DIPLOMA\nSCORE IS 65", hjust = 0, size = 3) +
annotate("text", x = 0, y = 12000, label = "2010 Regents scores on\nthe five most common tests", hjust = 0, size = 3) +
scale_x_continuous(breaks = seq(5, 95, 5), limit = c(0,99)) +
scale_y_continuous(position = "right") +
ggtitle("Scraping By") +
xlab("") + ylab("Number of tests") +
theme_minimal() +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
axis.ticks.length = unit(-0.2, "cm"),
plot.title = element_text(face = "bold"))
nyc_regents_scores %>%
filter(!is.na(score)) %>%
ggplot(aes(score, total)) +
annotate("rect", xmin = 65, xmax = 99, ymin = 0, ymax = 35000, alpha = .5) +
geom_bar(stat = "identity", color = "black", fill = "#C4843C") +
annotate("text", x = 66, y = 28000, label = "MINIMUM\nREGENTS DIPLOMA\nSCORE IS 65", hjust = 0, size = 3) +
annotate("text", x = 0, y = 12000, label = "2010 Regents scores on\nthe five most common tests", hjust = 0, size = 3) +
scale_x_continuous(breaks = seq(5, 95, 5), limit = c(0,99)) +
scale_y_continuous(position = "right") +
ggtitle("Scraping By") +
xlab("") + ylab("Number of tests") +
theme_light() +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
axis.ticks.length = unit(-0.2, "cm"),
plot.title = element_text(face = "bold"))
ggsave("figures/diploma_score_plot.png", width = 10, height = 6)
# ---
my_dgamma <- function(x, mean = 1, sd = 1){
shape = mean^2/sd^2
scale = sd^2 / mean
dgamma(x, shape = shape, scale = scale)
}
my_qgamma <- function(mean = 1, sd = 1){
shape = mean^2/sd^2
scale = sd^2 / mean
qgamma(c(0.1,0.9), shape = shape, scale = scale)
}
tmp <- tibble(candidate = c("Clinton", "Trump", "Johnson"),
avg = c(48.5, 44.9, 5.0),
avg_txt = c("48.5%", "44.9%", "5.0%"),
sd = rep(2, 3),
m = my_dgamma(avg, avg, sd)) %>%
mutate(candidate = reorder(candidate, -avg))
xx <- seq(0, 75, len = 300)
tmp_2 <- map_df(1:3, function(i){
tibble(candidate = tmp$candidate[i],
avg = tmp$avg[i],
sd = tmp$sd[i],
x = xx,
y = my_dgamma(xx, tmp$avg[i], tmp$sd[i]))
})
tmp_3 <- map_df(1:3, function(i){
qq <- my_qgamma(tmp$avg[i], tmp$sd[i])
xx <- seq(qq[1], qq[2], len = 200)
tibble(candidate = tmp$candidate[i],
avg = tmp$avg[i],
sd = tmp$sd[i],
x = xx,
y = my_dgamma(xx, tmp$avg[i], tmp$sd[i]))
})
tmp_2 %>%
ggplot(aes(x, ymax = y, ymin = 0)) +
geom_ribbon(fill = "grey") +
facet_grid(candidate~., switch = "y") +
scale_x_continuous(breaks = seq(0, 75, 25), position = "top",
label = paste0(seq(0, 75, 25), "%")) +
geom_abline(intercept = 0, slope = 0) +
xlab("") + ylab("") +
theme_minimal() +
theme(panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
strip.text.y = element_text(angle = 180, size = 11, vjust = 0.2)) +
geom_ribbon(data = tmp_3, mapping = aes(x = x, ymax = y, ymin = 0, fill = candidate), inherit.aes = FALSE, show.legend = FALSE) +
scale_fill_manual(values = c("#3cace4", "#fc5c34", "#fccc2c")) +
geom_point(data = tmp, mapping = aes(x = avg, y = m), inherit.aes = FALSE) +
geom_text(data = tmp, mapping = aes(x = avg, y = m, label = avg_txt), inherit.aes = FALSE, hjust = 0, nudge_x = 1)
ggsave("figures/voting_plot.png", width = 10, height = 6)
tmp_2 %>%
ggplot(aes(x, ymax = y, ymin = 0)) +
geom_ribbon(fill = "grey") +
facet_grid(candidate~., switch = "y") +
scale_x_continuous(breaks = seq(0, 75, 25), position = "top",
label = paste0(seq(0, 75, 25), "%")) +
geom_abline(intercept = 0, slope = 0) +
xlab("") + ylab("") +
theme_light() +
theme(panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
strip.text.y = element_text(angle = 180, size = 11, vjust = 0.2)) +
geom_ribbon(data = tmp_3, mapping = aes(x = x, ymax = y, ymin = 0, fill = candidate), inherit.aes = FALSE, show.legend = FALSE) +
scale_fill_manual(values = c("#3cace4", "#fc5c34", "#fccc2c")) +
geom_point(data = tmp, mapping = aes(x = avg, y = m), inherit.aes = FALSE) +
geom_text(data = tmp, mapping = aes(x = avg, y = m, label = avg_txt), inherit.aes = FALSE, hjust = 0, nudge_x = 1)
ggsave("figures/voting_plot.png", width = 10, height = 6)
data |>
mutate(country = reorder(country, -count)) |>
ggplot(aes(x = country, y = count, label = label)) +
geom_bar(stat = "identity", fill = "darkred") +
geom_text(nudge_y = 0.2, color = "darkred", size = 5) +
geom_flag(aes(y = -0.5, country = code), size = 10) +  # Adjusted flag position
scale_y_continuous(breaks = c(0, 1, 2, 3, 4), limits = c(-0.6, 4)) +  # More space for flags
annotate("text", x = 6.25, y = 3.8, label = "Source: UNODC Homicide Statistics", size = 5) +
ggtitle("Homicide per 100,000 in G-8 Countries") +
xlab("") +
ylab("# of gun-related homicides\nper 100,000 people") +
theme_light() +
theme(
plot.background = element_rect(fill = "gray90", color = NA),  # Gray background for flag visibility
axis.text.x = element_text(size = 8, vjust = -6),
axis.ticks.x = element_blank(),
axis.line.x = element_blank(),
plot.margin = unit(c(1, 1, 1, 1), "cm")
)
# Save the plot
ggsave("figures/homicide_plot.png", width = 10, height = 6)
data |>
mutate(country = reorder(country, -count)) |>
ggplot(aes(x = country, y = count, label = label)) +
geom_bar(stat = "identity", fill = "darkred") +
geom_text(nudge_y = 0.2, color = "darkred", size = 5) +
geom_flag(aes(y = -0.5, country = code), size = 10) +  # Adjusted flag position
scale_y_continuous(breaks = c(0, 1, 2, 3, 4), limits = c(-0.6, 4)) +  # More space for flags
annotate("text", x = 6.25, y = 3.8, label = "Source: UNODC Homicide Statistics", size = 5) +
ggtitle("Homicide per 100,000 in G-8 Countries") +
xlab("") +
ylab("# of gun-related homicides\nper 100,000 people") +
theme_light() +
theme(
axis.text.x = element_text(size = 8, vjust = -6),
axis.ticks.x = element_blank(),
axis.line.x = element_blank(),
plot.margin = unit(c(1, 1, 1, 1), "cm")
)
# Save the plot
ggsave("figures/homicide_plot.png", width = 10, height = 6)
library(tidyverse)
library(ggplot2)
library(ggflags)
library(countrycode)
library(ggthemes)
# https://simplystatistics.org/posts/2019-07-19-more-datasets-for-teaching-data-science-the-expanded-dslabs-package/
library(tidyverse)
library(ggplot2)
library(ggflags)
library(countrycode)
library(ggthemes)
library(dslabs)
data(temp_carbon)
# line plot of annual global, land and ocean temperature anomalies since 1880
temp_carbon %>%
select(Year = year, Global = temp_anomaly, Land = land_anomaly, Ocean = ocean_anomaly) %>%
gather(Region, Temp_anomaly, Global:Ocean) %>%
ggplot(aes(Year, Temp_anomaly, col = Region)) +
geom_line(size = 1) +
geom_hline(aes(yintercept = 0), col = colorblind_palette[8], lty = 2) +
geom_label(aes(x = 2005, y = -.08), col = colorblind_palette[8],
label = "20th century mean", size = 4) +
ylab("Temperature anomaly (degrees C)") +
xlim(c(1880, 2018)) +
scale_color_manual(values = colorblind_palette) +
ggtitle("Temperature anomaly relative to 20th century mean, 1880-2018")
library(ggrepel)
library(matrixStats)
# set colorblind-friendly color palette
colorblind_palette <- c("black", "#E69F00", "#56B4E9", "#009E73",
"#CC79A7", "#F0E442", "#0072B2", "#D55E00")
data(temp_carbon)
# line plot of annual global, land and ocean temperature anomalies since 1880
temp_carbon %>%
select(Year = year, Global = temp_anomaly, Land = land_anomaly, Ocean = ocean_anomaly) %>%
gather(Region, Temp_anomaly, Global:Ocean) %>%
ggplot(aes(Year, Temp_anomaly, col = Region)) +
geom_line(size = 1) +
geom_hline(aes(yintercept = 0), col = colorblind_palette[8], lty = 2) +
geom_label(aes(x = 2005, y = -.08), col = colorblind_palette[8],
label = "20th century mean", size = 4) +
ylab("Temperature anomaly (degrees C)") +
xlim(c(1880, 2018)) +
scale_color_manual(values = colorblind_palette) +
ggtitle("Temperature anomaly relative to 20th century mean, 1880-2018")
# line plot of annual global, land and ocean temperature anomalies since 1880
temp_carbon %>%
select(Year = year, Global = temp_anomaly, Land = land_anomaly, Ocean = ocean_anomaly) %>%
gather(Region, Temp_anomaly, Global:Ocean) %>%
ggplot(aes(Year, Temp_anomaly, col = Region)) +
geom_line(size = 1) +
geom_hline(aes(yintercept = 0), col = colorblind_palette[8], lty = 2) +
geom_label(aes(x = 2005, y = -.08), col = colorblind_palette[8],
label = "20th century mean", size = 4) +
ylab("Temperature anomaly (degrees C)") +
xlim(c(1880, 2018)) +
scale_color_manual(values = colorblind_palette) +
ggtitle("Temperature anomaly relative to 20th century mean, 1880-2018")+
theme_light()
ggsave("figures/temperature_anomaly .png", width = 10, height = 6)
library(GenVisR)
# Load relevant data from the manuscript
mutationData <- read.delim("http://genomedata.org/gen-viz-workshop/GenVisR/BKM120_Mutation_Data.tsv")
clinicalData <- read.delim("http://genomedata.org/gen-viz-workshop/GenVisR/BKM120_Clinical.tsv")
mutationBurden <- read.delim("http://genomedata.org/gen-viz-workshop/GenVisR/BKM120_MutationBurden.tsv")
# Reformat the mutation data for waterfall()
mutationData <- mutationData[,c("patient", "gene.name", "trv.type", "amino.acid.change")]
colnames(mutationData) <- c("sample", "gene", "variant_class", "amino.acid.change")
# Create a vector to save mutation priority order for plotting
mutation_priority <- as.character(unique(mutationData$variant_class))
# Create an initial plot
waterfall(mutationData, fileType = "Custom", variant_class_order=mutation_priority)
waterfall(mutationData, fileType = "Custom", variant_class_order = mutation_priority)
?waterfall
# Load necessary libraries
library(tidyverse)
library(GenVisR)
# Load necessary libraries
library(tidyverse)
library(GenVisR)
# Create the figures directory if it doesn't exist
figures_dir <- "figures"
# Load datasets using readr for better performance
mutation_data <- read_tsv("http://genomedata.org/gen-viz-workshop/GenVisR/BKM120_Mutation_Data.tsv")
# Load datasets using readr for better performance
mutation_data <- read_tsv("http://genomedata.org/gen-viz-workshop/GenVisR/BKM120_Mutation_Data.tsv")
clinical_data <- read_tsv("http://genomedata.org/gen-viz-workshop/GenVisR/BKM120_Clinical.tsv")
mutation_burden <- read_tsv("http://genomedata.org/gen-viz-workshop/GenVisR/BKM120_MutationBurden.tsv")
# Clean and reformat mutation data using native pipe
mutation_data <- mutation_data |>
select(
sample = patient,
gene = gene.name,
variant_class = trv.type,
amino_acid_change = amino.acid.change
) |>
mutate(variant_class = as.character(variant_class))
# Load datasets using readr for better performance
mutation_data <- read.delim("http://genomedata.org/gen-viz-workshop/GenVisR/BKM120_Mutation_Data.tsv")
clinical_data <- read.delim("http://genomedata.org/gen-viz-workshop/GenVisR/BKM120_Clinical.tsv")
mutation_burden <- read.delim("http://genomedata.org/gen-viz-workshop/GenVisR/BKM120_MutationBurden.tsv")
# Clean and reformat mutation data using native pipe
mutation_data <- mutation_data |>
select(
sample = patient,
gene = gene.name,
variant_class = trv.type,
amino_acid_change = amino.acid.change
) |>
mutate(variant_class = as.character(variant_class))
# Create a vector for mutation priority order
mutation_priority <- mutation_data |>
distinct(variant_class) |>
pull(variant_class)
# Generate the waterfall plot
waterfall_plot <- waterfall(
mutation_data,
fileType = "Custom",
variant_class_order = mutation_priority
)
mutation_priority
# Create a vector for mutation priority order
mutation_priority <- mutation_data |>
distinct(variant_class) |>
pull(variant_class) |>
as.character()
mutation_priority
# Generate the waterfall plot
waterfall_plot <- waterfall(
mutation_data,
fileType = "Custom",
variant_class_order = mutation_priority
)
?waterfall
waterfall_plot <- Waterfall(
mutation_data,
fileType = "Custom",
variant_class_order = mutation_priority
)
library(tidyverse)
library(GenVisR)
library(gridExtra)
# Set seed for reproducibility
set.seed(426)
# Create a data frame of random elements to plot
input_data <- data.frame(
sample = sample(1:5, 20, replace = TRUE),
gene = sample(letters[1:5], 20, replace = TRUE),
variant_class = sample(c("silent", "frameshift", "missense"), 20, replace = TRUE)
)
# Define the order of variant classes based on deleterious impact
most_deleterious <- c("frameshift", "missense", "silent")
# Generate waterfall plots with different variant class orders
p1 <- waterfall(
input_data,
fileType = "Custom",
variant_class_order = most_deleterious,
mainXlabel = TRUE,
out = "grob"
)
# Load necessary libraries
library(tidyverse)
library(GenVisR)
library(gridExtra)
# Set seed for reproducibility
set.seed(426)
# Create a sample dataset with random mutation data
input_data <- data.frame(
sample = sample(1:5, 20, replace = TRUE),
gene = sample(letters[1:5], 20, replace = TRUE),
variant_class = sample(c("silent", "frameshift", "missense"), 20, replace = TRUE)
)
# Define the order of variant classes based on deleterious impact
most_deleterious <- c("frameshift", "missense", "silent")
# Generate waterfall plot with the most deleterious mutation classes first
p1 <- Waterfall(
input_data,
mutationHierarchy = most_deleterious
)
library(data.table)
# Create a sample dataset with random mutation data
input_data <- data.frame(
sample = sample(1:5, 20, replace = TRUE),
gene = sample(letters[1:5], 20, replace = TRUE),
variant_class = sample(c("silent", "frameshift", "missense"), 20, replace = TRUE)
)
# Define mutation hierarchy as a data frame
mutation_hierarchy <- data.frame(
variant_class = c("frameshift", "missense", "silent"),
color = c("#E41A1C", "#377EB8", "#4DAF4A")  # Assign colors
)
p1 <- Waterfall(
input_data,
mutationHierarchy = mutation_hierarchy
)
